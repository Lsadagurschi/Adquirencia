import streamlit as st
import time
import threading
import os
import datetime

# Importa as classes e servi√ßos de dentro do seu pacote src
from src.services.simulation import PaymentSimulator

# --- Configura√ß√µes Iniciais ---
output_dir = "data/output"
# Garante que a pasta de output exista ao iniciar o app
if not os.path.exists(output_dir):
    os.makedirs(output_dir)

st.set_page_config(
    page_title="Simulador de Fluxo de Pagamentos",
    page_icon="üí≥",
    layout="wide"
)

# --- T√≠tulo e Descri√ß√£o da Aplica√ß√£o ---
st.title("üí≥ Simulador de Fluxo de Pagamentos Detalhado")
st.write("Este aplicativo simula o complexo fluxo de transa√ß√µes financeiras, incluindo **autoriza√ß√£o**, **captura**, **liquida√ß√£o**, **faturamento**, **pagamento ao lojista**, **relat√≥rios regulat√≥rios** e, agora, o intrincado processo de **chargeback**.")

# --- Inicializa√ß√£o do Estado da Sess√£o do Streamlit ---
if 'log_content' not in st.session_state:
    st.session_state.log_content = "Clique em 'Iniciar Simula√ß√£o' para come√ßar..."
if 'simulation_running' not in st.session_state:
    st.session_state.simulation_running = False
if 'thread_finished' not in st.session_state: # Novo estado para sinalizar o fim da thread
    st.session_state.thread_finished = False

# --- Placeholders para Atualiza√ß√µes Din√¢micas na UI ---
status_placeholder = st.empty()
log_placeholder = st.empty()

# --- Callback para Enviar Logs da Simula√ß√£o para o Streamlit ---
def streamlit_log_callback(message, color_tag="black"):
    color_map = {
        "white": "black",
        "blue": "#1E90FF",       # DodgerBlue
        "green": "#32CD32",      # LimeGreen
        "red": "#FF4500",        # OrangeRed
        "yellow": "#FFD700",     # Gold (mais vis√≠vel que yellow puro)
        "magenta": "#DA70D6",    # Orchid (um roxo suave)
        "lightblue": "#ADD8E6",  # LightBlue
        "black": "black",        # Padr√£o
    }
    html_color = color_map.get(color_tag, "black")
    
    st.session_state.log_content += f"<span style='color: {html_color};'>{message}</span><br>"
    
    # Atualiza o componente de log na UI do Streamlit.
    # Usar .markdown() com unsafe_allow_html=True
    log_placeholder.markdown(st.session_state.log_content, unsafe_allow_html=True)
    time.sleep(0.05) # Pequeno atraso para dar tempo de renderizar e para a visualiza√ß√£o


# --- Fun√ß√£o para Rodar a Simula√ß√£o em uma Thread Separada ---
def run_simulation_in_thread_target(log_callback, output_dir_path):
    try:
        simulator = PaymentSimulator(output_dir=output_dir_path, log_callback=log_callback)
        simulator.run_full_simulation()
    except Exception as e:
        log_callback(f"ERRO NA SIMULA√á√ÉO: {e}", "red")
    finally:
        st.session_state.thread_finished = True


# --- L√≥gica Principal do Streamlit App ---

# Verifica se a simula√ß√£o est√° em andamento (no estado da sess√£o)
if st.session_state.simulation_running:
    status_placeholder.info("Simula√ß√£o em andamento...")
    # Exibe o log continuamente enquanto a simula√ß√£o est√° rodando
    # N√£o precisa de uma chamada expl√≠cita para o log_placeholder aqui,
    # pois o callback j√° est√° fazendo isso.
    # O Streamlit ir√° re-renderizar o log_placeholder quando o session_state.log_content mudar.

    # Se a thread terminou, atualiza o status final e permite o bot√£o novamente
    if st.session_state.thread_finished:
        status_placeholder.success("Simula√ß√£o conclu√≠da! Verifique a pasta `data/output/` para os arquivos gerados.")
        st.session_state.simulation_running = False
        st.session_state.thread_finished = False # Resetar para a pr√≥xima rodada
        # N√£o precisa de rerun aqui. As mudan√ßas de session_state far√£o o Streamlit re-renderizar.

# Bot√£o Iniciar/Reiniciar Simula√ß√£o
if st.button("Iniciar Simula√ß√£o", disabled=st.session_state.simulation_running):
    st.session_state.simulation_running = True
    st.session_state.log_content = "" # Limpa o log ao iniciar
    st.session_state.thread_finished = False # Reseta o flag da thread
    
    log_placeholder.empty() # Limpa o log vis√≠vel
    status_placeholder.empty() # Limpa o status vis√≠vel
    
    # Inicia a fun√ß√£o de simula√ß√£o em uma nova thread.
    thread = threading.Thread(target=run_simulation_in_thread_target, args=(streamlit_log_callback, output_dir))
    thread.start()
    
    # REMOVIDA: st.experimental_rerun() AQUI.
    # A simples altera√ß√£o de st.session_state.simulation_running = True
    # j√° √© suficiente para que o Streamlit, no pr√≥ximo ciclo de renderiza√ß√£o,
    # desabilite o bot√£o.

# Exibe o log atualizado (para quando a simula√ß√£o n√£o est√° rodando ativamente, mas o log precisa ser visto)
log_placeholder.markdown(st.session_state.log_content, unsafe_allow_html=True)


# --- Barra Lateral com Informa√ß√µes Adicionais ---
st.sidebar.header("Informa√ß√µes")
st.sidebar.write("Os arquivos gerados durante a simula√ß√£o (captura, liquida√ß√£o, CNAB, regulat√≥rios, etc.) ser√£o salvos na pasta **`data/output/`** do seu ambiente.")
st.sidebar.markdown("""
    ---
    Desenvolvido para fins **did√°ticos**.
    Simula um ecossistema de pagamentos para ilustrar a intera√ß√£o
    entre Estabelecimentos, Portadores, Adquirentes, Bandeiras, Emissores e o Banco Central.
    """)
