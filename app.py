import streamlit as st
import time
import threading
import os
import datetime

# Importa as classes e servi√ßos de dentro do seu pacote src
from src.services.simulation import PaymentSimulator

# --- Configura√ß√µes Iniciais ---
output_dir = "data/output"
# Garante que a pasta de output exista ao iniciar o app
if not os.path.exists(output_dir):
    os.makedirs(output_dir)

st.set_page_config(
    page_title="Simulador de Fluxo de Pagamentos",
    page_icon="üí≥",
    layout="wide"
)

# --- T√≠tulo e Descri√ß√£o da Aplica√ß√£o ---
st.title("üí≥ Simulador de Fluxo de Pagamentos Detalhado")
st.write("Este aplicativo simula o complexo fluxo de transa√ß√µes financeiras, incluindo **autoriza√ß√£o**, **captura**, **liquida√ß√£o**, **faturamento**, **pagamento ao lojista**, **relat√≥rios regulat√≥rios** e, agora, o intrincado processo de **chargeback**.")

# --- Inicializa√ß√£o do Estado da Sess√£o do Streamlit ---
# st.session_state.log_messages agora √© uma LISTA de mensagens para controle incremental
if 'log_messages' not in st.session_state:
    st.session_state.log_messages = ["Clique em 'Iniciar Simula√ß√£o' para come√ßar..."]
if 'simulation_running' not in st.session_state:
    st.session_state.simulation_running = False
if 'thread_finished' not in st.session_state:
    st.session_state.thread_finished = False

# --- Placeholders para Atualiza√ß√µes Din√¢micas na UI ---
status_placeholder = st.empty()
log_placeholder = st.empty()

# --- Callback para Enviar Logs da Simula√ß√£o para o Streamlit ---
def streamlit_log_callback(message, color_tag="black"):
    # Adiciona a mensagem formatada como uma string √† lista de mensagens.
    # A renderiza√ß√£o real acontecer√° no loop da thread principal.
    color_map = {
        "white": "black",
        "blue": "#1E90FF",
        "green": "#32CD32",
        "red": "#FF4500",
        "yellow": "#FFD700",
        "magenta": "#DA70D6",
        "lightblue": "#ADD8E6",
        "black": "black",
    }
    html_color = color_map.get(color_tag, "black")
    st.session_state.log_messages.append(f"<span style='color: {html_color};'>{message}</span>")


# --- Fun√ß√£o para Rodar a Simula√ß√£o em uma Thread Separada ---
def run_simulation_in_thread_target(log_callback, output_dir_path):
    try:
        simulator = PaymentSimulator(output_dir=output_dir_path, log_callback=log_callback)
        simulator.run_full_simulation()
    except Exception as e:
        log_callback(f"ERRO NA SIMULA√á√ÉO: {e}", "red")
    finally:
        st.session_state.thread_finished = True


# --- L√≥gica Principal do Streamlit App ---

# Bot√£o Iniciar/Reiniciar Simula√ß√£o
if st.button("Iniciar Simula√ß√£o", disabled=st.session_state.simulation_running):
    st.session_state.simulation_running = True
    st.session_state.log_messages = [] # Limpa o log ao iniciar
    st.session_state.thread_finished = False # Reseta o flag da thread
    
    log_placeholder.empty()
    status_placeholder.empty()
    
    # Inicia a fun√ß√£o de simula√ß√£o em uma nova thread.
    thread = threading.Thread(target=run_simulation_in_thread_target, args=(streamlit_log_callback, output_dir))
    thread.start()
    
    # For√ßa uma re-renderiza√ß√£o para que o Streamlit perceba
    # que a simula√ß√£o come√ßou e desabilite o bot√£o.
    st.experimental_rerun()


# --- Loop de Atualiza√ß√£o de Logs na Thread Principal ---
# Este loop s√≥ √© executado se a simula√ß√£o estiver rodando.
while st.session_state.simulation_running:
    # Converte a lista de mensagens em uma √∫nica string HTML para exibir.
    current_log_content = "<br>".join(st.session_state.log_messages)
    log_placeholder.markdown(current_log_content, unsafe_allow_html=True)
    status_placeholder.info("Simula√ß√£o em andamento...")

    # Pequena pausa para evitar sobrecarga de CPU e permitir que o Streamlit
    # atualize a interface. Voc√™ pode ajustar este valor.
    time.sleep(0.1) # Pausa de 100ms

    # Se a thread sinalizou que terminou, saia do loop.
    if st.session_state.thread_finished:
        break

# Ap√≥s o loop (simula√ß√£o terminou ou n√£o foi iniciada), exibe o estado final do log.
final_log_content = "<br>".join(st.session_state.log_messages)
log_placeholder.markdown(final_log_content, unsafe_allow_html=True)

# Verifica o estado final da simula√ß√£o para exibir a mensagem de conclus√£o.
if st.session_state.thread_finished and not st.session_state.simulation_running:
    status_placeholder.success("Simula√ß√£o conclu√≠da! Verifique a pasta `data/output/` para os arquivos gerados.")
    st.session_state.thread_finished = False # Resetar para a pr√≥xima execu√ß√£o

# --- Barra Lateral com Informa√ß√µes Adicionais ---
st.sidebar.header("Informa√ß√µes")
st.sidebar.write("Os arquivos gerados durante a simula√ß√£o (captura, liquida√ß√£o, CNAB, regulat√≥rios, etc.) ser√£o salvos na pasta **`data/output/`** do seu ambiente.")
st.sidebar.markdown("""
    ---
    Desenvolvido para fins **did√°ticos**.
    Simula um ecossistema de pagamentos para ilustrar a intera√ß√£o
    entre Estabelecimentos, Portadores, Adquirentes, Bandeiras, Emissores e o Banco Central.
    """)
