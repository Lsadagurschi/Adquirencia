import streamlit as st
import time
import threading
import os
import datetime # Para formatar datas no log

# Importa as classes e servi√ßos de dentro do seu pacote src
from src.services.simulation import PaymentSimulator

# --- Configura√ß√µes Iniciais ---
output_dir = "data/output"
# Garante que a pasta de output exista ao iniciar o app
if not os.path.exists(output_dir):
    os.makedirs(output_dir)

st.set_page_config(
    page_title="Simulador de Fluxo de Pagamentos",
    page_icon="üí≥",
    layout="wide"
)

# --- T√≠tulo e Descri√ß√£o da Aplica√ß√£o ---
st.title("üí≥ Simulador de Fluxo de Pagamentos Detalhado")
st.write("Este aplicativo simula o complexo fluxo de transa√ß√µes financeiras, incluindo **autoriza√ß√£o**, **captura**, **liquida√ß√£o**, **faturamento**, **pagamento ao lojista**, **relat√≥rios regulat√≥rios** e, agora, o intrincado processo de **chargeback**.")

# --- Inicializa√ß√£o do Estado da Sess√£o do Streamlit ---
# O Streamlit re-executa o script a cada intera√ß√£o, ent√£o st.session_state √© crucial
# para manter o estado entre as execu√ß√µes.
if 'log_content' not in st.session_state:
    st.session_state.log_content = "Clique em 'Iniciar Simula√ß√£o' para come√ßar..."
if 'simulation_running' not in st.session_state:
    st.session_state.simulation_running = False

# --- Placeholders para Atualiza√ß√µes Din√¢micas na UI ---
# Usamos st.empty() para criar "slots" onde podemos atualizar o conte√∫do
# sem re-renderizar todo o aplicativo, o que √© √∫til para logs em tempo real.
status_placeholder = st.empty()
log_placeholder = st.empty()

# --- Callback para Enviar Logs da Simula√ß√£o para o Streamlit ---
def streamlit_log_callback(message, color_tag="black"):
    # Mapeia tags de cor internas para cores HTML/CSS para exibi√ß√£o no Streamlit.
    color_map = {
        "white": "black",
        "blue": "#1E90FF",       # DodgerBlue
        "green": "#32CD32",      # LimeGreen
        "red": "#FF4500",        # OrangeRed
        "yellow": "#FFD700",     # Gold (mais vis√≠vel que yellow puro)
        "magenta": "#DA70D6",    # Orchid (um roxo suave)
        "lightblue": "#ADD8E6",  # LightBlue
        "black": "black",        # Padr√£o
    }
    html_color = color_map.get(color_tag, "black") # Pega a cor mapeada, ou preto como fallback

    # Adiciona a nova mensagem formatada ao conte√∫do acumulado do log.
    # Usamos <br> para quebra de linha em HTML.
    st.session_state.log_content += f"<span style='color: {html_color};'>{message}</span><br>"
    
    # Atualiza o componente de log na UI do Streamlit.
    # unsafe_allow_html=True √© necess√°rio para renderizar tags HTML.
    log_placeholder.markdown(st.session_state.log_content, unsafe_allow_html=True)
    time.sleep(0.05) # Pequeno atraso para dar tempo de renderizar e para a visualiza√ß√£o


# --- Fun√ß√£o para Rodar a Simula√ß√£o em uma Thread Separada ---
def run_simulation_in_thread():
    # Instancia o simulador, passando o diret√≥rio de sa√≠da e a fun√ß√£o de callback para logs.
    simulator = PaymentSimulator(output_dir=output_dir, log_callback=streamlit_log_callback)
    simulator.run_full_simulation() # Inicia o fluxo completo da simula√ß√£o.
    
    # Ap√≥s a simula√ß√£o, atualiza o status final e permite que o bot√£o seja clicado novamente.
    status_placeholder.success("Simula√ß√£o conclu√≠da! Verifique a pasta `data/output/` para os arquivos gerados.")
    st.session_state.simulation_running = False
    st.experimental_rerun() # For√ßa o Streamlit a re-renderizar para atualizar o estado do bot√£o.

# --- Bot√£o Iniciar/Reiniciar Simula√ß√£o ---
if st.button("Iniciar Simula√ß√£o", disabled=st.session_state.simulation_running):
    st.session_state.simulation_running = True
    st.session_state.log_content = "" # Limpa o log ao iniciar uma nova simula√ß√£o.
    
    # Limpa os placeholders antes de iniciar a simula√ß√£o para uma nova corrida.
    log_placeholder.empty()
    status_placeholder.empty()
    
    # Inicia a fun√ß√£o de simula√ß√£o em uma nova thread.
    # Isso √© crucial para que a interface do Streamlit n√£o "congele" durante a simula√ß√£o.
    thread = threading.Thread(target=run_simulation_in_thread)
    thread.start()
    
    # Exibe um status inicial enquanto a simula√ß√£o est√° em andamento.
    status_placeholder.info("Simula√ß√£o em andamento...")
    st.experimental_rerun() # Re-renderiza para desabilitar o bot√£o imediatamente.

# --- Exibe o Log de Eventos (Atualizado pelo callback) ---
# Este `markdown` estar√° sempre "ouvindo" as atualiza√ß√µes do `log_placeholder`.
log_placeholder.markdown(st.session_state.log_content, unsafe_allow_html=True)

# --- Barra Lateral com Informa√ß√µes Adicionais ---
st.sidebar.header("Informa√ß√µes")
st.sidebar.write("Os arquivos gerados durante a simula√ß√£o (captura, liquida√ß√£o, CNAB, regulat√≥rios, etc.) ser√£o salvos na pasta **`data/output/`** do seu ambiente.")
st.sidebar.markdown("""
    ---
    Desenvolvido para fins **did√°ticos**.
    Simula um ecossistema de pagamentos para ilustrar a intera√ß√£o
    entre Estabelecimentos, Portadores, Adquirentes, Bandeiras, Emissores e o Banco Central.
    """)
